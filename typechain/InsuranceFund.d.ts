/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
  Contract,
  ContractTransaction,
  Overrides,
  CallOverrides,
} from "ethers";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";
import { TypedEventFilter, TypedEvent, TypedListener } from "./commons";

interface InsuranceFundInterface extends ethers.utils.Interface {
  functions: {
    "MAX_TRANSACTION_FEE()": FunctionFragment;
    "candidate()": FunctionFragment;
    "claimAccruedRewards()": FunctionFragment;
    "computeCoinWeight(tuple,tuple)": FunctionFragment;
    "contractLockedBalance()": FunctionFragment;
    "distributionEndingBlock()": FunctionFragment;
    "distributionStartingBlock()": FunctionFragment;
    "getLockedCoinsWeightage()": FunctionFragment;
    "getTotalLockedBalance()": FunctionFragment;
    "getUnlockedBalance(address)": FunctionFragment;
    "getUserAccruedRewards(address)": FunctionFragment;
    "getUserClaimedRewards(address)": FunctionFragment;
    "initialize(address,address,uint256)": FunctionFragment;
    "insuranceProviders(address)": FunctionFragment;
    "lock(tuple,tuple)": FunctionFragment;
    "owner()": FunctionFragment;
    "renounceOwnership()": FunctionFragment;
    "rewardDistributionStarted()": FunctionFragment;
    "rewardsPerBlock()": FunctionFragment;
    "rewardsRemaining()": FunctionFragment;
    "setOwner(address)": FunctionFragment;
    "setTransactionFee(uint256)": FunctionFragment;
    "startRewardDistribution(uint256)": FunctionFragment;
    "state()": FunctionFragment;
    "stopRewardDistribution()": FunctionFragment;
    "totalRewardsToDistribute()": FunctionFragment;
    "transactionFee()": FunctionFragment;
    "transactionFeeAccrued()": FunctionFragment;
    "unlock(tuple)": FunctionFragment;
    "updateOwner()": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "MAX_TRANSACTION_FEE",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "candidate", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "claimAccruedRewards",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "computeCoinWeight",
    values: [{ d: BigNumberish }, { d: BigNumberish }]
  ): string;
  encodeFunctionData(
    functionFragment: "contractLockedBalance",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "distributionEndingBlock",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "distributionStartingBlock",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getLockedCoinsWeightage",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getTotalLockedBalance",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getUnlockedBalance",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "getUserAccruedRewards",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "getUserClaimedRewards",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "initialize",
    values: [string, string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "insuranceProviders",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "lock",
    values: [{ d: BigNumberish }, { d: BigNumberish }]
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "rewardDistributionStarted",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "rewardsPerBlock",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "rewardsRemaining",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "setOwner", values: [string]): string;
  encodeFunctionData(
    functionFragment: "setTransactionFee",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "startRewardDistribution",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "state", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "stopRewardDistribution",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "totalRewardsToDistribute",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "transactionFee",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "transactionFeeAccrued",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "unlock",
    values: [{ d: BigNumberish }]
  ): string;
  encodeFunctionData(
    functionFragment: "updateOwner",
    values?: undefined
  ): string;

  decodeFunctionResult(
    functionFragment: "MAX_TRANSACTION_FEE",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "candidate", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "claimAccruedRewards",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "computeCoinWeight",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "contractLockedBalance",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "distributionEndingBlock",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "distributionStartingBlock",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getLockedCoinsWeightage",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getTotalLockedBalance",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getUnlockedBalance",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getUserAccruedRewards",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getUserClaimedRewards",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "initialize", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "insuranceProviders",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "lock", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "rewardDistributionStarted",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "rewardsPerBlock",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "rewardsRemaining",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "setOwner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "setTransactionFee",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "startRewardDistribution",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "state", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "stopRewardDistribution",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "totalRewardsToDistribute",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transactionFee",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transactionFeeAccrued",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "unlock", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "updateOwner",
    data: BytesLike
  ): Result;

  events: {
    "InsuranceChanged(uint8,address,tuple)": EventFragment;
    "OwnershipTransferred(address,address)": EventFragment;
    "RewardClaimed(address,tuple,uint256,uint256)": EventFragment;
    "RewardDistributionStatus(bytes32,uint256,tuple)": EventFragment;
    "TransactionFeeUpdated(uint256,uint256)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "InsuranceChanged"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "OwnershipTransferred"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RewardClaimed"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RewardDistributionStatus"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "TransactionFeeUpdated"): EventFragment;
}

export class InsuranceFund extends Contract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  listeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter?: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): Array<TypedListener<EventArgsArray, EventArgsObject>>;
  off<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  on<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  once<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeListener<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeAllListeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): this;

  listeners(eventName?: string): Array<Listener>;
  off(eventName: string, listener: Listener): this;
  on(eventName: string, listener: Listener): this;
  once(eventName: string, listener: Listener): this;
  removeListener(eventName: string, listener: Listener): this;
  removeAllListeners(eventName?: string): this;

  queryFilter<EventArgsArray extends Array<any>, EventArgsObject>(
    event: TypedEventFilter<EventArgsArray, EventArgsObject>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEvent<EventArgsArray & EventArgsObject>>>;

  interface: InsuranceFundInterface;

  functions: {
    MAX_TRANSACTION_FEE(overrides?: CallOverrides): Promise<[BigNumber]>;

    "MAX_TRANSACTION_FEE()"(overrides?: CallOverrides): Promise<[BigNumber]>;

    candidate(overrides?: CallOverrides): Promise<[string]>;

    "candidate()"(overrides?: CallOverrides): Promise<[string]>;

    claimAccruedRewards(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "claimAccruedRewards()"(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    computeCoinWeight(
      _amount: { d: BigNumberish },
      _period: { d: BigNumberish },
      overrides?: CallOverrides
    ): Promise<
      [[BigNumber] & { d: BigNumber }, [BigNumber] & { d: BigNumber }]
    >;

    "computeCoinWeight((uint256),(uint256))"(
      _amount: { d: BigNumberish },
      _period: { d: BigNumberish },
      overrides?: CallOverrides
    ): Promise<
      [[BigNumber] & { d: BigNumber }, [BigNumber] & { d: BigNumber }]
    >;

    contractLockedBalance(
      overrides?: CallOverrides
    ): Promise<
      [
        BigNumber,
        [BigNumber] & { d: BigNumber },
        [BigNumber] & { d: BigNumber }
      ] & {
        blockNumber: BigNumber;
        coinsLocked: [BigNumber] & { d: BigNumber };
        coinsWeight: [BigNumber] & { d: BigNumber };
      }
    >;

    "contractLockedBalance()"(
      overrides?: CallOverrides
    ): Promise<
      [
        BigNumber,
        [BigNumber] & { d: BigNumber },
        [BigNumber] & { d: BigNumber }
      ] & {
        blockNumber: BigNumber;
        coinsLocked: [BigNumber] & { d: BigNumber };
        coinsWeight: [BigNumber] & { d: BigNumber };
      }
    >;

    distributionEndingBlock(overrides?: CallOverrides): Promise<[BigNumber]>;

    "distributionEndingBlock()"(
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    distributionStartingBlock(overrides?: CallOverrides): Promise<[BigNumber]>;

    "distributionStartingBlock()"(
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    getLockedCoinsWeightage(
      overrides?: CallOverrides
    ): Promise<[[BigNumber] & { d: BigNumber }]>;

    "getLockedCoinsWeightage()"(
      overrides?: CallOverrides
    ): Promise<[[BigNumber] & { d: BigNumber }]>;

    getTotalLockedBalance(
      overrides?: CallOverrides
    ): Promise<[[BigNumber] & { d: BigNumber }]>;

    "getTotalLockedBalance()"(
      overrides?: CallOverrides
    ): Promise<[[BigNumber] & { d: BigNumber }]>;

    getUnlockedBalance(
      _user: string,
      overrides?: CallOverrides
    ): Promise<[[BigNumber] & { d: BigNumber }]>;

    "getUnlockedBalance(address)"(
      _user: string,
      overrides?: CallOverrides
    ): Promise<[[BigNumber] & { d: BigNumber }]>;

    getUserAccruedRewards(
      _user: string,
      overrides?: CallOverrides
    ): Promise<[[BigNumber] & { d: BigNumber }]>;

    "getUserAccruedRewards(address)"(
      _user: string,
      overrides?: CallOverrides
    ): Promise<[[BigNumber] & { d: BigNumber }]>;

    getUserClaimedRewards(
      _user: string,
      overrides?: CallOverrides
    ): Promise<[[BigNumber] & { d: BigNumber }]>;

    "getUserClaimedRewards(address)"(
      _user: string,
      overrides?: CallOverrides
    ): Promise<[[BigNumber] & { d: BigNumber }]>;

    initialize(
      _detToken: string,
      _insuranceToken: string,
      _transactionFee: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "initialize(address,address,uint256)"(
      _detToken: string,
      _insuranceToken: string,
      _transactionFee: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    insuranceProviders(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<
      [
        boolean,
        [BigNumber] & { d: BigNumber },
        BigNumber,
        [
          BigNumber,
          [BigNumber] & { d: BigNumber },
          [BigNumber] & { d: BigNumber }
        ] & {
          blockNumber: BigNumber;
          coinsLocked: [BigNumber] & { d: BigNumber };
          coinsWeight: [BigNumber] & { d: BigNumber };
        },
        BigNumber,
        [BigNumber] & { d: BigNumber }
      ] & {
        exists: boolean;
        index: [BigNumber] & { d: BigNumber };
        lastBlockNumber: BigNumber;
        balance: [
          BigNumber,
          [BigNumber] & { d: BigNumber },
          [BigNumber] & { d: BigNumber }
        ] & {
          blockNumber: BigNumber;
          coinsLocked: [BigNumber] & { d: BigNumber };
          coinsWeight: [BigNumber] & { d: BigNumber };
        };
        balanceTrailMapLen: BigNumber;
        claimedRewards: [BigNumber] & { d: BigNumber };
      }
    >;

    "insuranceProviders(address)"(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<
      [
        boolean,
        [BigNumber] & { d: BigNumber },
        BigNumber,
        [
          BigNumber,
          [BigNumber] & { d: BigNumber },
          [BigNumber] & { d: BigNumber }
        ] & {
          blockNumber: BigNumber;
          coinsLocked: [BigNumber] & { d: BigNumber };
          coinsWeight: [BigNumber] & { d: BigNumber };
        },
        BigNumber,
        [BigNumber] & { d: BigNumber }
      ] & {
        exists: boolean;
        index: [BigNumber] & { d: BigNumber };
        lastBlockNumber: BigNumber;
        balance: [
          BigNumber,
          [BigNumber] & { d: BigNumber },
          [BigNumber] & { d: BigNumber }
        ] & {
          blockNumber: BigNumber;
          coinsLocked: [BigNumber] & { d: BigNumber };
          coinsWeight: [BigNumber] & { d: BigNumber };
        };
        balanceTrailMapLen: BigNumber;
        claimedRewards: [BigNumber] & { d: BigNumber };
      }
    >;

    lock(
      _amount: { d: BigNumberish },
      _period: { d: BigNumberish },
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "lock((uint256),(uint256))"(
      _amount: { d: BigNumberish },
      _period: { d: BigNumberish },
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    owner(overrides?: CallOverrides): Promise<[string]>;

    "owner()"(overrides?: CallOverrides): Promise<[string]>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "renounceOwnership()"(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    rewardDistributionStarted(overrides?: CallOverrides): Promise<[boolean]>;

    "rewardDistributionStarted()"(
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    rewardsPerBlock(
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { d: BigNumber }>;

    "rewardsPerBlock()"(
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { d: BigNumber }>;

    rewardsRemaining(
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { d: BigNumber }>;

    "rewardsRemaining()"(
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { d: BigNumber }>;

    setOwner(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "setOwner(address)"(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setTransactionFee(
      _transactionFee: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "setTransactionFee(uint256)"(
      _transactionFee: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    startRewardDistribution(
      _blocks: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "startRewardDistribution(uint256)"(
      _blocks: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    state(
      overrides?: CallOverrides
    ): Promise<
      [[BigNumber] & { d: BigNumber }, BigNumber] & {
        index: [BigNumber] & { d: BigNumber };
        blockNumber: BigNumber;
      }
    >;

    "state()"(
      overrides?: CallOverrides
    ): Promise<
      [[BigNumber] & { d: BigNumber }, BigNumber] & {
        index: [BigNumber] & { d: BigNumber };
        blockNumber: BigNumber;
      }
    >;

    stopRewardDistribution(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "stopRewardDistribution()"(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    totalRewardsToDistribute(
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { d: BigNumber }>;

    "totalRewardsToDistribute()"(
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { d: BigNumber }>;

    transactionFee(
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { d: BigNumber }>;

    "transactionFee()"(
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { d: BigNumber }>;

    transactionFeeAccrued(
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { d: BigNumber }>;

    "transactionFeeAccrued()"(
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { d: BigNumber }>;

    unlock(
      _amount: { d: BigNumberish },
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "unlock((uint256))"(
      _amount: { d: BigNumberish },
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    updateOwner(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "updateOwner()"(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;
  };

  MAX_TRANSACTION_FEE(overrides?: CallOverrides): Promise<BigNumber>;

  "MAX_TRANSACTION_FEE()"(overrides?: CallOverrides): Promise<BigNumber>;

  candidate(overrides?: CallOverrides): Promise<string>;

  "candidate()"(overrides?: CallOverrides): Promise<string>;

  claimAccruedRewards(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "claimAccruedRewards()"(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  computeCoinWeight(
    _amount: { d: BigNumberish },
    _period: { d: BigNumberish },
    overrides?: CallOverrides
  ): Promise<[[BigNumber] & { d: BigNumber }, [BigNumber] & { d: BigNumber }]>;

  "computeCoinWeight((uint256),(uint256))"(
    _amount: { d: BigNumberish },
    _period: { d: BigNumberish },
    overrides?: CallOverrides
  ): Promise<[[BigNumber] & { d: BigNumber }, [BigNumber] & { d: BigNumber }]>;

  contractLockedBalance(
    overrides?: CallOverrides
  ): Promise<
    [
      BigNumber,
      [BigNumber] & { d: BigNumber },
      [BigNumber] & { d: BigNumber }
    ] & {
      blockNumber: BigNumber;
      coinsLocked: [BigNumber] & { d: BigNumber };
      coinsWeight: [BigNumber] & { d: BigNumber };
    }
  >;

  "contractLockedBalance()"(
    overrides?: CallOverrides
  ): Promise<
    [
      BigNumber,
      [BigNumber] & { d: BigNumber },
      [BigNumber] & { d: BigNumber }
    ] & {
      blockNumber: BigNumber;
      coinsLocked: [BigNumber] & { d: BigNumber };
      coinsWeight: [BigNumber] & { d: BigNumber };
    }
  >;

  distributionEndingBlock(overrides?: CallOverrides): Promise<BigNumber>;

  "distributionEndingBlock()"(overrides?: CallOverrides): Promise<BigNumber>;

  distributionStartingBlock(overrides?: CallOverrides): Promise<BigNumber>;

  "distributionStartingBlock()"(overrides?: CallOverrides): Promise<BigNumber>;

  getLockedCoinsWeightage(
    overrides?: CallOverrides
  ): Promise<[BigNumber] & { d: BigNumber }>;

  "getLockedCoinsWeightage()"(
    overrides?: CallOverrides
  ): Promise<[BigNumber] & { d: BigNumber }>;

  getTotalLockedBalance(
    overrides?: CallOverrides
  ): Promise<[BigNumber] & { d: BigNumber }>;

  "getTotalLockedBalance()"(
    overrides?: CallOverrides
  ): Promise<[BigNumber] & { d: BigNumber }>;

  getUnlockedBalance(
    _user: string,
    overrides?: CallOverrides
  ): Promise<[BigNumber] & { d: BigNumber }>;

  "getUnlockedBalance(address)"(
    _user: string,
    overrides?: CallOverrides
  ): Promise<[BigNumber] & { d: BigNumber }>;

  getUserAccruedRewards(
    _user: string,
    overrides?: CallOverrides
  ): Promise<[BigNumber] & { d: BigNumber }>;

  "getUserAccruedRewards(address)"(
    _user: string,
    overrides?: CallOverrides
  ): Promise<[BigNumber] & { d: BigNumber }>;

  getUserClaimedRewards(
    _user: string,
    overrides?: CallOverrides
  ): Promise<[BigNumber] & { d: BigNumber }>;

  "getUserClaimedRewards(address)"(
    _user: string,
    overrides?: CallOverrides
  ): Promise<[BigNumber] & { d: BigNumber }>;

  initialize(
    _detToken: string,
    _insuranceToken: string,
    _transactionFee: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "initialize(address,address,uint256)"(
    _detToken: string,
    _insuranceToken: string,
    _transactionFee: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  insuranceProviders(
    arg0: string,
    overrides?: CallOverrides
  ): Promise<
    [
      boolean,
      [BigNumber] & { d: BigNumber },
      BigNumber,
      [
        BigNumber,
        [BigNumber] & { d: BigNumber },
        [BigNumber] & { d: BigNumber }
      ] & {
        blockNumber: BigNumber;
        coinsLocked: [BigNumber] & { d: BigNumber };
        coinsWeight: [BigNumber] & { d: BigNumber };
      },
      BigNumber,
      [BigNumber] & { d: BigNumber }
    ] & {
      exists: boolean;
      index: [BigNumber] & { d: BigNumber };
      lastBlockNumber: BigNumber;
      balance: [
        BigNumber,
        [BigNumber] & { d: BigNumber },
        [BigNumber] & { d: BigNumber }
      ] & {
        blockNumber: BigNumber;
        coinsLocked: [BigNumber] & { d: BigNumber };
        coinsWeight: [BigNumber] & { d: BigNumber };
      };
      balanceTrailMapLen: BigNumber;
      claimedRewards: [BigNumber] & { d: BigNumber };
    }
  >;

  "insuranceProviders(address)"(
    arg0: string,
    overrides?: CallOverrides
  ): Promise<
    [
      boolean,
      [BigNumber] & { d: BigNumber },
      BigNumber,
      [
        BigNumber,
        [BigNumber] & { d: BigNumber },
        [BigNumber] & { d: BigNumber }
      ] & {
        blockNumber: BigNumber;
        coinsLocked: [BigNumber] & { d: BigNumber };
        coinsWeight: [BigNumber] & { d: BigNumber };
      },
      BigNumber,
      [BigNumber] & { d: BigNumber }
    ] & {
      exists: boolean;
      index: [BigNumber] & { d: BigNumber };
      lastBlockNumber: BigNumber;
      balance: [
        BigNumber,
        [BigNumber] & { d: BigNumber },
        [BigNumber] & { d: BigNumber }
      ] & {
        blockNumber: BigNumber;
        coinsLocked: [BigNumber] & { d: BigNumber };
        coinsWeight: [BigNumber] & { d: BigNumber };
      };
      balanceTrailMapLen: BigNumber;
      claimedRewards: [BigNumber] & { d: BigNumber };
    }
  >;

  lock(
    _amount: { d: BigNumberish },
    _period: { d: BigNumberish },
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "lock((uint256),(uint256))"(
    _amount: { d: BigNumberish },
    _period: { d: BigNumberish },
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  owner(overrides?: CallOverrides): Promise<string>;

  "owner()"(overrides?: CallOverrides): Promise<string>;

  renounceOwnership(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "renounceOwnership()"(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  rewardDistributionStarted(overrides?: CallOverrides): Promise<boolean>;

  "rewardDistributionStarted()"(overrides?: CallOverrides): Promise<boolean>;

  rewardsPerBlock(overrides?: CallOverrides): Promise<BigNumber>;

  "rewardsPerBlock()"(overrides?: CallOverrides): Promise<BigNumber>;

  rewardsRemaining(overrides?: CallOverrides): Promise<BigNumber>;

  "rewardsRemaining()"(overrides?: CallOverrides): Promise<BigNumber>;

  setOwner(
    newOwner: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "setOwner(address)"(
    newOwner: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setTransactionFee(
    _transactionFee: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "setTransactionFee(uint256)"(
    _transactionFee: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  startRewardDistribution(
    _blocks: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "startRewardDistribution(uint256)"(
    _blocks: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  state(
    overrides?: CallOverrides
  ): Promise<
    [[BigNumber] & { d: BigNumber }, BigNumber] & {
      index: [BigNumber] & { d: BigNumber };
      blockNumber: BigNumber;
    }
  >;

  "state()"(
    overrides?: CallOverrides
  ): Promise<
    [[BigNumber] & { d: BigNumber }, BigNumber] & {
      index: [BigNumber] & { d: BigNumber };
      blockNumber: BigNumber;
    }
  >;

  stopRewardDistribution(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "stopRewardDistribution()"(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  totalRewardsToDistribute(overrides?: CallOverrides): Promise<BigNumber>;

  "totalRewardsToDistribute()"(overrides?: CallOverrides): Promise<BigNumber>;

  transactionFee(overrides?: CallOverrides): Promise<BigNumber>;

  "transactionFee()"(overrides?: CallOverrides): Promise<BigNumber>;

  transactionFeeAccrued(overrides?: CallOverrides): Promise<BigNumber>;

  "transactionFeeAccrued()"(overrides?: CallOverrides): Promise<BigNumber>;

  unlock(
    _amount: { d: BigNumberish },
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "unlock((uint256))"(
    _amount: { d: BigNumberish },
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  updateOwner(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "updateOwner()"(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    MAX_TRANSACTION_FEE(overrides?: CallOverrides): Promise<BigNumber>;

    "MAX_TRANSACTION_FEE()"(overrides?: CallOverrides): Promise<BigNumber>;

    candidate(overrides?: CallOverrides): Promise<string>;

    "candidate()"(overrides?: CallOverrides): Promise<string>;

    claimAccruedRewards(overrides?: CallOverrides): Promise<void>;

    "claimAccruedRewards()"(overrides?: CallOverrides): Promise<void>;

    computeCoinWeight(
      _amount: { d: BigNumberish },
      _period: { d: BigNumberish },
      overrides?: CallOverrides
    ): Promise<
      [[BigNumber] & { d: BigNumber }, [BigNumber] & { d: BigNumber }]
    >;

    "computeCoinWeight((uint256),(uint256))"(
      _amount: { d: BigNumberish },
      _period: { d: BigNumberish },
      overrides?: CallOverrides
    ): Promise<
      [[BigNumber] & { d: BigNumber }, [BigNumber] & { d: BigNumber }]
    >;

    contractLockedBalance(
      overrides?: CallOverrides
    ): Promise<
      [
        BigNumber,
        [BigNumber] & { d: BigNumber },
        [BigNumber] & { d: BigNumber }
      ] & {
        blockNumber: BigNumber;
        coinsLocked: [BigNumber] & { d: BigNumber };
        coinsWeight: [BigNumber] & { d: BigNumber };
      }
    >;

    "contractLockedBalance()"(
      overrides?: CallOverrides
    ): Promise<
      [
        BigNumber,
        [BigNumber] & { d: BigNumber },
        [BigNumber] & { d: BigNumber }
      ] & {
        blockNumber: BigNumber;
        coinsLocked: [BigNumber] & { d: BigNumber };
        coinsWeight: [BigNumber] & { d: BigNumber };
      }
    >;

    distributionEndingBlock(overrides?: CallOverrides): Promise<BigNumber>;

    "distributionEndingBlock()"(overrides?: CallOverrides): Promise<BigNumber>;

    distributionStartingBlock(overrides?: CallOverrides): Promise<BigNumber>;

    "distributionStartingBlock()"(
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getLockedCoinsWeightage(
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { d: BigNumber }>;

    "getLockedCoinsWeightage()"(
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { d: BigNumber }>;

    getTotalLockedBalance(
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { d: BigNumber }>;

    "getTotalLockedBalance()"(
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { d: BigNumber }>;

    getUnlockedBalance(
      _user: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { d: BigNumber }>;

    "getUnlockedBalance(address)"(
      _user: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { d: BigNumber }>;

    getUserAccruedRewards(
      _user: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { d: BigNumber }>;

    "getUserAccruedRewards(address)"(
      _user: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { d: BigNumber }>;

    getUserClaimedRewards(
      _user: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { d: BigNumber }>;

    "getUserClaimedRewards(address)"(
      _user: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { d: BigNumber }>;

    initialize(
      _detToken: string,
      _insuranceToken: string,
      _transactionFee: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "initialize(address,address,uint256)"(
      _detToken: string,
      _insuranceToken: string,
      _transactionFee: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    insuranceProviders(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<
      [
        boolean,
        [BigNumber] & { d: BigNumber },
        BigNumber,
        [
          BigNumber,
          [BigNumber] & { d: BigNumber },
          [BigNumber] & { d: BigNumber }
        ] & {
          blockNumber: BigNumber;
          coinsLocked: [BigNumber] & { d: BigNumber };
          coinsWeight: [BigNumber] & { d: BigNumber };
        },
        BigNumber,
        [BigNumber] & { d: BigNumber }
      ] & {
        exists: boolean;
        index: [BigNumber] & { d: BigNumber };
        lastBlockNumber: BigNumber;
        balance: [
          BigNumber,
          [BigNumber] & { d: BigNumber },
          [BigNumber] & { d: BigNumber }
        ] & {
          blockNumber: BigNumber;
          coinsLocked: [BigNumber] & { d: BigNumber };
          coinsWeight: [BigNumber] & { d: BigNumber };
        };
        balanceTrailMapLen: BigNumber;
        claimedRewards: [BigNumber] & { d: BigNumber };
      }
    >;

    "insuranceProviders(address)"(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<
      [
        boolean,
        [BigNumber] & { d: BigNumber },
        BigNumber,
        [
          BigNumber,
          [BigNumber] & { d: BigNumber },
          [BigNumber] & { d: BigNumber }
        ] & {
          blockNumber: BigNumber;
          coinsLocked: [BigNumber] & { d: BigNumber };
          coinsWeight: [BigNumber] & { d: BigNumber };
        },
        BigNumber,
        [BigNumber] & { d: BigNumber }
      ] & {
        exists: boolean;
        index: [BigNumber] & { d: BigNumber };
        lastBlockNumber: BigNumber;
        balance: [
          BigNumber,
          [BigNumber] & { d: BigNumber },
          [BigNumber] & { d: BigNumber }
        ] & {
          blockNumber: BigNumber;
          coinsLocked: [BigNumber] & { d: BigNumber };
          coinsWeight: [BigNumber] & { d: BigNumber };
        };
        balanceTrailMapLen: BigNumber;
        claimedRewards: [BigNumber] & { d: BigNumber };
      }
    >;

    lock(
      _amount: { d: BigNumberish },
      _period: { d: BigNumberish },
      overrides?: CallOverrides
    ): Promise<void>;

    "lock((uint256),(uint256))"(
      _amount: { d: BigNumberish },
      _period: { d: BigNumberish },
      overrides?: CallOverrides
    ): Promise<void>;

    owner(overrides?: CallOverrides): Promise<string>;

    "owner()"(overrides?: CallOverrides): Promise<string>;

    renounceOwnership(overrides?: CallOverrides): Promise<void>;

    "renounceOwnership()"(overrides?: CallOverrides): Promise<void>;

    rewardDistributionStarted(overrides?: CallOverrides): Promise<boolean>;

    "rewardDistributionStarted()"(overrides?: CallOverrides): Promise<boolean>;

    rewardsPerBlock(overrides?: CallOverrides): Promise<BigNumber>;

    "rewardsPerBlock()"(overrides?: CallOverrides): Promise<BigNumber>;

    rewardsRemaining(overrides?: CallOverrides): Promise<BigNumber>;

    "rewardsRemaining()"(overrides?: CallOverrides): Promise<BigNumber>;

    setOwner(newOwner: string, overrides?: CallOverrides): Promise<void>;

    "setOwner(address)"(
      newOwner: string,
      overrides?: CallOverrides
    ): Promise<void>;

    setTransactionFee(
      _transactionFee: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "setTransactionFee(uint256)"(
      _transactionFee: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    startRewardDistribution(
      _blocks: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "startRewardDistribution(uint256)"(
      _blocks: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    state(
      overrides?: CallOverrides
    ): Promise<
      [[BigNumber] & { d: BigNumber }, BigNumber] & {
        index: [BigNumber] & { d: BigNumber };
        blockNumber: BigNumber;
      }
    >;

    "state()"(
      overrides?: CallOverrides
    ): Promise<
      [[BigNumber] & { d: BigNumber }, BigNumber] & {
        index: [BigNumber] & { d: BigNumber };
        blockNumber: BigNumber;
      }
    >;

    stopRewardDistribution(overrides?: CallOverrides): Promise<void>;

    "stopRewardDistribution()"(overrides?: CallOverrides): Promise<void>;

    totalRewardsToDistribute(overrides?: CallOverrides): Promise<BigNumber>;

    "totalRewardsToDistribute()"(overrides?: CallOverrides): Promise<BigNumber>;

    transactionFee(overrides?: CallOverrides): Promise<BigNumber>;

    "transactionFee()"(overrides?: CallOverrides): Promise<BigNumber>;

    transactionFeeAccrued(overrides?: CallOverrides): Promise<BigNumber>;

    "transactionFeeAccrued()"(overrides?: CallOverrides): Promise<BigNumber>;

    unlock(
      _amount: { d: BigNumberish },
      overrides?: CallOverrides
    ): Promise<void>;

    "unlock((uint256))"(
      _amount: { d: BigNumberish },
      overrides?: CallOverrides
    ): Promise<void>;

    updateOwner(overrides?: CallOverrides): Promise<void>;

    "updateOwner()"(overrides?: CallOverrides): Promise<void>;
  };

  filters: {
    InsuranceChanged(
      action: null,
      userAddress: null,
      amount: null
    ): TypedEventFilter<
      [number, string, [BigNumber] & { d: BigNumber }],
      {
        action: number;
        userAddress: string;
        amount: [BigNumber] & { d: BigNumber };
      }
    >;

    OwnershipTransferred(
      previousOwner: string | null,
      newOwner: string | null
    ): TypedEventFilter<
      [string, string],
      { previousOwner: string; newOwner: string }
    >;

    RewardClaimed(
      user: null,
      amount: null,
      fromBlock: null,
      toBlock: null
    ): TypedEventFilter<
      [string, [BigNumber] & { d: BigNumber }, BigNumber, BigNumber],
      {
        user: string;
        amount: [BigNumber] & { d: BigNumber };
        fromBlock: BigNumber;
        toBlock: BigNumber;
      }
    >;

    RewardDistributionStatus(
      status: null,
      blockNumber: null,
      funds: null
    ): TypedEventFilter<
      [string, BigNumber, [BigNumber] & { d: BigNumber }],
      {
        status: string;
        blockNumber: BigNumber;
        funds: [BigNumber] & { d: BigNumber };
      }
    >;

    TransactionFeeUpdated(
      oldFee: null,
      newFee: null
    ): TypedEventFilter<
      [BigNumber, BigNumber],
      { oldFee: BigNumber; newFee: BigNumber }
    >;
  };

  estimateGas: {
    MAX_TRANSACTION_FEE(overrides?: CallOverrides): Promise<BigNumber>;

    "MAX_TRANSACTION_FEE()"(overrides?: CallOverrides): Promise<BigNumber>;

    candidate(overrides?: CallOverrides): Promise<BigNumber>;

    "candidate()"(overrides?: CallOverrides): Promise<BigNumber>;

    claimAccruedRewards(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "claimAccruedRewards()"(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    computeCoinWeight(
      _amount: { d: BigNumberish },
      _period: { d: BigNumberish },
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "computeCoinWeight((uint256),(uint256))"(
      _amount: { d: BigNumberish },
      _period: { d: BigNumberish },
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    contractLockedBalance(overrides?: CallOverrides): Promise<BigNumber>;

    "contractLockedBalance()"(overrides?: CallOverrides): Promise<BigNumber>;

    distributionEndingBlock(overrides?: CallOverrides): Promise<BigNumber>;

    "distributionEndingBlock()"(overrides?: CallOverrides): Promise<BigNumber>;

    distributionStartingBlock(overrides?: CallOverrides): Promise<BigNumber>;

    "distributionStartingBlock()"(
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getLockedCoinsWeightage(overrides?: CallOverrides): Promise<BigNumber>;

    "getLockedCoinsWeightage()"(overrides?: CallOverrides): Promise<BigNumber>;

    getTotalLockedBalance(overrides?: CallOverrides): Promise<BigNumber>;

    "getTotalLockedBalance()"(overrides?: CallOverrides): Promise<BigNumber>;

    getUnlockedBalance(
      _user: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "getUnlockedBalance(address)"(
      _user: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getUserAccruedRewards(
      _user: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "getUserAccruedRewards(address)"(
      _user: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getUserClaimedRewards(
      _user: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "getUserClaimedRewards(address)"(
      _user: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    initialize(
      _detToken: string,
      _insuranceToken: string,
      _transactionFee: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "initialize(address,address,uint256)"(
      _detToken: string,
      _insuranceToken: string,
      _transactionFee: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    insuranceProviders(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "insuranceProviders(address)"(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    lock(
      _amount: { d: BigNumberish },
      _period: { d: BigNumberish },
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "lock((uint256),(uint256))"(
      _amount: { d: BigNumberish },
      _period: { d: BigNumberish },
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<BigNumber>;

    "owner()"(overrides?: CallOverrides): Promise<BigNumber>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "renounceOwnership()"(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    rewardDistributionStarted(overrides?: CallOverrides): Promise<BigNumber>;

    "rewardDistributionStarted()"(
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    rewardsPerBlock(overrides?: CallOverrides): Promise<BigNumber>;

    "rewardsPerBlock()"(overrides?: CallOverrides): Promise<BigNumber>;

    rewardsRemaining(overrides?: CallOverrides): Promise<BigNumber>;

    "rewardsRemaining()"(overrides?: CallOverrides): Promise<BigNumber>;

    setOwner(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "setOwner(address)"(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setTransactionFee(
      _transactionFee: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "setTransactionFee(uint256)"(
      _transactionFee: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    startRewardDistribution(
      _blocks: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "startRewardDistribution(uint256)"(
      _blocks: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    state(overrides?: CallOverrides): Promise<BigNumber>;

    "state()"(overrides?: CallOverrides): Promise<BigNumber>;

    stopRewardDistribution(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "stopRewardDistribution()"(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    totalRewardsToDistribute(overrides?: CallOverrides): Promise<BigNumber>;

    "totalRewardsToDistribute()"(overrides?: CallOverrides): Promise<BigNumber>;

    transactionFee(overrides?: CallOverrides): Promise<BigNumber>;

    "transactionFee()"(overrides?: CallOverrides): Promise<BigNumber>;

    transactionFeeAccrued(overrides?: CallOverrides): Promise<BigNumber>;

    "transactionFeeAccrued()"(overrides?: CallOverrides): Promise<BigNumber>;

    unlock(
      _amount: { d: BigNumberish },
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "unlock((uint256))"(
      _amount: { d: BigNumberish },
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    updateOwner(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "updateOwner()"(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    MAX_TRANSACTION_FEE(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "MAX_TRANSACTION_FEE()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    candidate(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "candidate()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    claimAccruedRewards(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "claimAccruedRewards()"(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    computeCoinWeight(
      _amount: { d: BigNumberish },
      _period: { d: BigNumberish },
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "computeCoinWeight((uint256),(uint256))"(
      _amount: { d: BigNumberish },
      _period: { d: BigNumberish },
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    contractLockedBalance(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "contractLockedBalance()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    distributionEndingBlock(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "distributionEndingBlock()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    distributionStartingBlock(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "distributionStartingBlock()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getLockedCoinsWeightage(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "getLockedCoinsWeightage()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getTotalLockedBalance(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "getTotalLockedBalance()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getUnlockedBalance(
      _user: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "getUnlockedBalance(address)"(
      _user: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getUserAccruedRewards(
      _user: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "getUserAccruedRewards(address)"(
      _user: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getUserClaimedRewards(
      _user: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "getUserClaimedRewards(address)"(
      _user: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    initialize(
      _detToken: string,
      _insuranceToken: string,
      _transactionFee: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "initialize(address,address,uint256)"(
      _detToken: string,
      _insuranceToken: string,
      _transactionFee: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    insuranceProviders(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "insuranceProviders(address)"(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    lock(
      _amount: { d: BigNumberish },
      _period: { d: BigNumberish },
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "lock((uint256),(uint256))"(
      _amount: { d: BigNumberish },
      _period: { d: BigNumberish },
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "owner()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "renounceOwnership()"(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    rewardDistributionStarted(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "rewardDistributionStarted()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    rewardsPerBlock(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "rewardsPerBlock()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    rewardsRemaining(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "rewardsRemaining()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    setOwner(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "setOwner(address)"(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setTransactionFee(
      _transactionFee: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "setTransactionFee(uint256)"(
      _transactionFee: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    startRewardDistribution(
      _blocks: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "startRewardDistribution(uint256)"(
      _blocks: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    state(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "state()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    stopRewardDistribution(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "stopRewardDistribution()"(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    totalRewardsToDistribute(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "totalRewardsToDistribute()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    transactionFee(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "transactionFee()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    transactionFeeAccrued(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "transactionFeeAccrued()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    unlock(
      _amount: { d: BigNumberish },
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "unlock((uint256))"(
      _amount: { d: BigNumberish },
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    updateOwner(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "updateOwner()"(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;
  };
}
