/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
  Contract,
  ContractTransaction,
  Overrides,
  CallOverrides,
} from "ethers";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";
import { TypedEventFilter, TypedEvent, TypedListener } from "./commons";

interface ITokenVestingInterface extends ethers.utils.Interface {
  functions: {
    "balanceUnlocked(address)": FunctionFragment;
    "claimReleasedTokens(address)": FunctionFragment;
    "getTotalUnclaimedBalance(address)": FunctionFragment;
    "getUnclaimedBalanceFromProvider(address,address)": FunctionFragment;
    "getVestingStatus(address,address)": FunctionFragment;
    "hasReleasedTokens(address,address,uint256)": FunctionFragment;
    "revokeVesting(address)": FunctionFragment;
    "vestTokens(address,address,tuple,bool,uint256,uint256,uint256,bool)": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "balanceUnlocked",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "claimReleasedTokens",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "getTotalUnclaimedBalance",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "getUnclaimedBalanceFromProvider",
    values: [string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "getVestingStatus",
    values: [string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "hasReleasedTokens",
    values: [string, string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "revokeVesting",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "vestTokens",
    values: [
      string,
      string,
      { d: BigNumberish },
      boolean,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      boolean
    ]
  ): string;

  decodeFunctionResult(
    functionFragment: "balanceUnlocked",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "claimReleasedTokens",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getTotalUnclaimedBalance",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getUnclaimedBalanceFromProvider",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getVestingStatus",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "hasReleasedTokens",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "revokeVesting",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "vestTokens", data: BytesLike): Result;

  events: {};
}

export class ITokenVesting extends Contract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  listeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter?: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): Array<TypedListener<EventArgsArray, EventArgsObject>>;
  off<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  on<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  once<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeListener<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeAllListeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): this;

  listeners(eventName?: string): Array<Listener>;
  off(eventName: string, listener: Listener): this;
  on(eventName: string, listener: Listener): this;
  once(eventName: string, listener: Listener): this;
  removeListener(eventName: string, listener: Listener): this;
  removeAllListeners(eventName?: string): this;

  queryFilter<EventArgsArray extends Array<any>, EventArgsObject>(
    event: TypedEventFilter<EventArgsArray, EventArgsObject>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEvent<EventArgsArray & EventArgsObject>>>;

  interface: ITokenVestingInterface;

  functions: {
    balanceUnlocked(
      _provider: string,
      overrides?: CallOverrides
    ): Promise<[[BigNumber] & { d: BigNumber }]>;

    "balanceUnlocked(address)"(
      _provider: string,
      overrides?: CallOverrides
    ): Promise<[[BigNumber] & { d: BigNumber }]>;

    claimReleasedTokens(
      _provider: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "claimReleasedTokens(address)"(
      _provider: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    getTotalUnclaimedBalance(
      _user: string,
      overrides?: CallOverrides
    ): Promise<[[BigNumber] & { d: BigNumber }]>;

    "getTotalUnclaimedBalance(address)"(
      _user: string,
      overrides?: CallOverrides
    ): Promise<[[BigNumber] & { d: BigNumber }]>;

    getUnclaimedBalanceFromProvider(
      _user: string,
      _provider: string,
      overrides?: CallOverrides
    ): Promise<[[BigNumber] & { d: BigNumber }]>;

    "getUnclaimedBalanceFromProvider(address,address)"(
      _user: string,
      _provider: string,
      overrides?: CallOverrides
    ): Promise<[[BigNumber] & { d: BigNumber }]>;

    getVestingStatus(
      _user: string,
      _provider: string,
      overrides?: CallOverrides
    ): Promise<
      [
        string,
        boolean,
        BigNumber,
        BigNumber,
        BigNumber,
        [BigNumber] & { d: BigNumber },
        [BigNumber] & { d: BigNumber },
        boolean,
        BigNumber,
        BigNumber,
        boolean
      ]
    >;

    "getVestingStatus(address,address)"(
      _user: string,
      _provider: string,
      overrides?: CallOverrides
    ): Promise<
      [
        string,
        boolean,
        BigNumber,
        BigNumber,
        BigNumber,
        [BigNumber] & { d: BigNumber },
        [BigNumber] & { d: BigNumber },
        boolean,
        BigNumber,
        BigNumber,
        boolean
      ]
    >;

    hasReleasedTokens(
      _user: string,
      _provider: string,
      _timestamp: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    "hasReleasedTokens(address,address,uint256)"(
      _user: string,
      _provider: string,
      _timestamp: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    revokeVesting(
      _user: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "revokeVesting(address)"(
      _user: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    vestTokens(
      _provider: string,
      _receiver: string,
      _amount: { d: BigNumberish },
      _revocable: boolean,
      _start: BigNumberish,
      _duration: BigNumberish,
      _cliff: BigNumberish,
      _fixedInterval: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "vestTokens(address,address,(uint256),bool,uint256,uint256,uint256,bool)"(
      _provider: string,
      _receiver: string,
      _amount: { d: BigNumberish },
      _revocable: boolean,
      _start: BigNumberish,
      _duration: BigNumberish,
      _cliff: BigNumberish,
      _fixedInterval: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;
  };

  balanceUnlocked(
    _provider: string,
    overrides?: CallOverrides
  ): Promise<[BigNumber] & { d: BigNumber }>;

  "balanceUnlocked(address)"(
    _provider: string,
    overrides?: CallOverrides
  ): Promise<[BigNumber] & { d: BigNumber }>;

  claimReleasedTokens(
    _provider: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "claimReleasedTokens(address)"(
    _provider: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  getTotalUnclaimedBalance(
    _user: string,
    overrides?: CallOverrides
  ): Promise<[BigNumber] & { d: BigNumber }>;

  "getTotalUnclaimedBalance(address)"(
    _user: string,
    overrides?: CallOverrides
  ): Promise<[BigNumber] & { d: BigNumber }>;

  getUnclaimedBalanceFromProvider(
    _user: string,
    _provider: string,
    overrides?: CallOverrides
  ): Promise<[BigNumber] & { d: BigNumber }>;

  "getUnclaimedBalanceFromProvider(address,address)"(
    _user: string,
    _provider: string,
    overrides?: CallOverrides
  ): Promise<[BigNumber] & { d: BigNumber }>;

  getVestingStatus(
    _user: string,
    _provider: string,
    overrides?: CallOverrides
  ): Promise<
    [
      string,
      boolean,
      BigNumber,
      BigNumber,
      BigNumber,
      [BigNumber] & { d: BigNumber },
      [BigNumber] & { d: BigNumber },
      boolean,
      BigNumber,
      BigNumber,
      boolean
    ]
  >;

  "getVestingStatus(address,address)"(
    _user: string,
    _provider: string,
    overrides?: CallOverrides
  ): Promise<
    [
      string,
      boolean,
      BigNumber,
      BigNumber,
      BigNumber,
      [BigNumber] & { d: BigNumber },
      [BigNumber] & { d: BigNumber },
      boolean,
      BigNumber,
      BigNumber,
      boolean
    ]
  >;

  hasReleasedTokens(
    _user: string,
    _provider: string,
    _timestamp: BigNumberish,
    overrides?: CallOverrides
  ): Promise<boolean>;

  "hasReleasedTokens(address,address,uint256)"(
    _user: string,
    _provider: string,
    _timestamp: BigNumberish,
    overrides?: CallOverrides
  ): Promise<boolean>;

  revokeVesting(
    _user: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "revokeVesting(address)"(
    _user: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  vestTokens(
    _provider: string,
    _receiver: string,
    _amount: { d: BigNumberish },
    _revocable: boolean,
    _start: BigNumberish,
    _duration: BigNumberish,
    _cliff: BigNumberish,
    _fixedInterval: boolean,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "vestTokens(address,address,(uint256),bool,uint256,uint256,uint256,bool)"(
    _provider: string,
    _receiver: string,
    _amount: { d: BigNumberish },
    _revocable: boolean,
    _start: BigNumberish,
    _duration: BigNumberish,
    _cliff: BigNumberish,
    _fixedInterval: boolean,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    balanceUnlocked(
      _provider: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { d: BigNumber }>;

    "balanceUnlocked(address)"(
      _provider: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { d: BigNumber }>;

    claimReleasedTokens(
      _provider: string,
      overrides?: CallOverrides
    ): Promise<void>;

    "claimReleasedTokens(address)"(
      _provider: string,
      overrides?: CallOverrides
    ): Promise<void>;

    getTotalUnclaimedBalance(
      _user: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { d: BigNumber }>;

    "getTotalUnclaimedBalance(address)"(
      _user: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { d: BigNumber }>;

    getUnclaimedBalanceFromProvider(
      _user: string,
      _provider: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { d: BigNumber }>;

    "getUnclaimedBalanceFromProvider(address,address)"(
      _user: string,
      _provider: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { d: BigNumber }>;

    getVestingStatus(
      _user: string,
      _provider: string,
      overrides?: CallOverrides
    ): Promise<
      [
        string,
        boolean,
        BigNumber,
        BigNumber,
        BigNumber,
        [BigNumber] & { d: BigNumber },
        [BigNumber] & { d: BigNumber },
        boolean,
        BigNumber,
        BigNumber,
        boolean
      ]
    >;

    "getVestingStatus(address,address)"(
      _user: string,
      _provider: string,
      overrides?: CallOverrides
    ): Promise<
      [
        string,
        boolean,
        BigNumber,
        BigNumber,
        BigNumber,
        [BigNumber] & { d: BigNumber },
        [BigNumber] & { d: BigNumber },
        boolean,
        BigNumber,
        BigNumber,
        boolean
      ]
    >;

    hasReleasedTokens(
      _user: string,
      _provider: string,
      _timestamp: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    "hasReleasedTokens(address,address,uint256)"(
      _user: string,
      _provider: string,
      _timestamp: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    revokeVesting(_user: string, overrides?: CallOverrides): Promise<void>;

    "revokeVesting(address)"(
      _user: string,
      overrides?: CallOverrides
    ): Promise<void>;

    vestTokens(
      _provider: string,
      _receiver: string,
      _amount: { d: BigNumberish },
      _revocable: boolean,
      _start: BigNumberish,
      _duration: BigNumberish,
      _cliff: BigNumberish,
      _fixedInterval: boolean,
      overrides?: CallOverrides
    ): Promise<void>;

    "vestTokens(address,address,(uint256),bool,uint256,uint256,uint256,bool)"(
      _provider: string,
      _receiver: string,
      _amount: { d: BigNumberish },
      _revocable: boolean,
      _start: BigNumberish,
      _duration: BigNumberish,
      _cliff: BigNumberish,
      _fixedInterval: boolean,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {};

  estimateGas: {
    balanceUnlocked(
      _provider: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "balanceUnlocked(address)"(
      _provider: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    claimReleasedTokens(
      _provider: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "claimReleasedTokens(address)"(
      _provider: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    getTotalUnclaimedBalance(
      _user: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "getTotalUnclaimedBalance(address)"(
      _user: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getUnclaimedBalanceFromProvider(
      _user: string,
      _provider: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "getUnclaimedBalanceFromProvider(address,address)"(
      _user: string,
      _provider: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getVestingStatus(
      _user: string,
      _provider: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "getVestingStatus(address,address)"(
      _user: string,
      _provider: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    hasReleasedTokens(
      _user: string,
      _provider: string,
      _timestamp: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "hasReleasedTokens(address,address,uint256)"(
      _user: string,
      _provider: string,
      _timestamp: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    revokeVesting(
      _user: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "revokeVesting(address)"(
      _user: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    vestTokens(
      _provider: string,
      _receiver: string,
      _amount: { d: BigNumberish },
      _revocable: boolean,
      _start: BigNumberish,
      _duration: BigNumberish,
      _cliff: BigNumberish,
      _fixedInterval: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "vestTokens(address,address,(uint256),bool,uint256,uint256,uint256,bool)"(
      _provider: string,
      _receiver: string,
      _amount: { d: BigNumberish },
      _revocable: boolean,
      _start: BigNumberish,
      _duration: BigNumberish,
      _cliff: BigNumberish,
      _fixedInterval: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    balanceUnlocked(
      _provider: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "balanceUnlocked(address)"(
      _provider: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    claimReleasedTokens(
      _provider: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "claimReleasedTokens(address)"(
      _provider: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    getTotalUnclaimedBalance(
      _user: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "getTotalUnclaimedBalance(address)"(
      _user: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getUnclaimedBalanceFromProvider(
      _user: string,
      _provider: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "getUnclaimedBalanceFromProvider(address,address)"(
      _user: string,
      _provider: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getVestingStatus(
      _user: string,
      _provider: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "getVestingStatus(address,address)"(
      _user: string,
      _provider: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    hasReleasedTokens(
      _user: string,
      _provider: string,
      _timestamp: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "hasReleasedTokens(address,address,uint256)"(
      _user: string,
      _provider: string,
      _timestamp: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    revokeVesting(
      _user: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "revokeVesting(address)"(
      _user: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    vestTokens(
      _provider: string,
      _receiver: string,
      _amount: { d: BigNumberish },
      _revocable: boolean,
      _start: BigNumberish,
      _duration: BigNumberish,
      _cliff: BigNumberish,
      _fixedInterval: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "vestTokens(address,address,(uint256),bool,uint256,uint256,uint256,bool)"(
      _provider: string,
      _receiver: string,
      _amount: { d: BigNumberish },
      _revocable: boolean,
      _start: BigNumberish,
      _duration: BigNumberish,
      _cliff: BigNumberish,
      _fixedInterval: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;
  };
}
